### #{} 与 ${}之中的区别

${}属于占位符语句 , 可以作用域xml属性值和sql的内部 , ==属于字符替换==

$()也可以对传递过来的参数原样拼接在sql语句中 , 但是并不推荐这样做 , 因为会造成sql的注入问题

.#{}属于预编译语句 , MyBatis会将#{}替换成 ? 然后按照顺序给sql中的 ? 占位符设置参数值 , 所以#{}是预编译语句 , 可以有效的防止SQL的注入 , 会更加安全



### 实体类中的属性名与表中的字段名不一致问题

方案一  : 通过在sql中定义一个新的别名 , 从而是字段保持一致 

方案二 : 通常情况下字段不一致是因为 , 属性多是以驼峰命名法来表示 , 而数据库中是以下划线来表示 , 可以配置如下代码去掉 _ 来用驼峰表示

```java
<setting name="logImpl" value="LOG4J"/> 
<setting name="mapUnderscoreToCamelCase" value="true" /> 
</settings> 
```



方案三 : 通过映射文件上面的ResultMap来进行字段与数据名称的映射 , 在映射的地方修改为可以映射到的名字就可以了



### MyBatis的动态SQL是做什么的? 都有哪些动态SQL?能简述一下动态SQL的执行原理么?

动态sql主要是可以用来让我们在执行sql语句的过程中可以穿插一些逻辑代码 , 从而让sql语句更加的灵活 , 

动态sql有 <if> </if>    <where></where>   <set></set>

<font style="color:red">执行原理为 , 使用OGNL表达式 , 从sql参数对象中计算表达式的值 , 根据值动态的拼接SQL , 以此完成动态SQL的功能</font> 



### Mapper接口绑定都有什么实现的方式 

方案一 : 通过XMLMapper里面写SQL来绑定, 在这种情况下 , 要指定xml中的全限定名来进行绑定

方案二 : 通过Mapper接口上面配置MyBatis的注解来实现绑定@Select , @Update, @Delete等注解

方案三 : 通过注解绑定 , 在接口的方法上面贴 @SelectProvider



### 在Mapper中如何实现多参数的传递 

方案一 : 通过Map集合的方式进行参数传递

方案二 : ==可以配置@Param注解来实现多个参数传递==



### 什么是MyBatis

MyBatis是一个半自动化的框架 , 也叫做半ORM==(**对象关系映射**)==框架 , 它的内部封装了JDBC , 在开发的时候 , 只需要关注SQL语句的本身, 不需要花费精力去处理加载驱动 , 创建连接等一系列的过程 

==MyBatis可以使用XML或者注解来配置和映射结果集 ,将POJO映射成数据库中的记录 ,避免了所有的 JDBC代码带来的手动传递参数 , 封装结果集的问题==

==通过xml或者注解的方式将要执行的各种 **statement(声明)** 配置起来 , 并且通过java对象和声明中配置的sql参数进行映射形成最终要执行的sql语句 , 最后由MyBatis执行sql并将结果映射为java对象==





### MyBatis的优点

比较传统的jdbc模式 , MyBatis减少了大量的代码 

 而且和Spring集成方便 

 可以降低SQL代码写在java代码中 达到解耦的效果  

 和各种数据库都有集成 ( 因为MyBatis使用了JDBC来连接数据库 , 所以只要JDBC支持的数据库MyBatis都可以集成 )

 通过xml或者注解的方式来编写sql语句 , 这样也方便我们管理 

 帮助我们封装结果集



### MyBatis的缺点

 SQL语句的编写量比较大 , 尤其是复杂的数据结构  ,所以对开发人员的sql编写要有一定的功底

 SQL语句依赖数据库 , 导致可移植性比较差



### MyBatis的一级缓存与二级缓存

==一级缓存  是基于PerpetualCache的HashMap缓存 其作用域为Session , 当Session flush或者close之后 , 该Session中的Cache就会被清空掉== , 在默认的状态中 , 一级缓存是开启的

二级缓存 也是基于PerpetualCache的Hashmap缓存 , ==不过作用域为Mapper , 并且可以自定义存储源==  , 比如Ehcahe , 默认是不打开二级缓存的  , ==如果想要开启二级缓存 , 需要在要缓存的属性类上面实现 **序列化**== , 然后在配置文件中配置 **<Cache>** 用来开启缓存



